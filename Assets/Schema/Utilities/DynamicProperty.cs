//------------------------------------------------------------------------------ 
// This code was generated by Schema
// 
// Changes to this file may cause incorrect behavior
//--------------------------------------------------------------------------------
#pragma warning disable

using System;
using UnityEngine;

public static class DynamicProperty
{
    public static object Get(object obj, string path)
    {
        switch (obj.GetType().AssemblyQualifiedName)
        {
            case "System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089":
                return GetPropertyForInt32((Int32)obj, path);
            case "System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089":
                return GetPropertyForString((String)obj, path);
            case "System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089":
                return GetPropertyForSingle((Single)obj, path);
            case "System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089":
                return GetPropertyForBoolean((Boolean)obj, path);
            case "UnityEngine.Quaternion, UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null":
                return GetPropertyForQuaternion((Quaternion)obj, path);
            case "UnityEngine.Vector2, UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null":
                return GetPropertyForVector2((Vector2)obj, path);
            case "UnityEngine.Vector3, UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null":
                return GetPropertyForVector3((Vector3)obj, path);
            case "UnityEngine.Vector4, UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null":
                return GetPropertyForVector4((Vector4)obj, path);
            case "UnityEngine.Matrix4x4, UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null":
                return GetPropertyForMatrix4x4((Matrix4x4)obj, path);
            case "UnityEngine.GameObject, UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null":
                return GetPropertyForGameObject((GameObject)obj, path);
            case "UnityEngine.AnimationCurve, UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null":
                return GetPropertyForAnimationCurve((AnimationCurve)obj, path);
            default:
                return null;
        }
    }
    public static void Set(object obj, string path, object value)
    {
        switch (obj.GetType().AssemblyQualifiedName)
        {
            case "System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089":
                SetPropertyForInt32((Int32)obj, path, value);
                break;
            case "System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089":
                SetPropertyForString((String)obj, path, value);
                break;
            case "System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089":
                SetPropertyForSingle((Single)obj, path, value);
                break;
            case "System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089":
                SetPropertyForBoolean((Boolean)obj, path, value);
                break;
            case "UnityEngine.Quaternion, UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null":
                SetPropertyForQuaternion((Quaternion)obj, path, value);
                break;
            case "UnityEngine.Vector2, UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null":
                SetPropertyForVector2((Vector2)obj, path, value);
                break;
            case "UnityEngine.Vector3, UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null":
                SetPropertyForVector3((Vector3)obj, path, value);
                break;
            case "UnityEngine.Vector4, UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null":
                SetPropertyForVector4((Vector4)obj, path, value);
                break;
            case "UnityEngine.Matrix4x4, UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null":
                SetPropertyForMatrix4x4((Matrix4x4)obj, path, value);
                break;
            case "UnityEngine.GameObject, UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null":
                SetPropertyForGameObject((GameObject)obj, path, value);
                break;
            case "UnityEngine.AnimationCurve, UnityEngine.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null":
                SetPropertyForAnimationCurve((AnimationCurve)obj, path, value);
                break;

        }
    }
    private static object GetPropertyForInt32(Int32 obj, string path)
    {
        switch (path)
        {
            default:
                return null;
        }
    }
    private static void SetPropertyForInt32(Int32 obj, string path, object value)
    {
        switch (path)
        {

        }
    }
    private static object GetPropertyForString(String obj, string path)
    {
        switch (path)
        {
            case "/Length":
                return obj.Length;
            default:
                return null;
        }
    }
    private static void SetPropertyForString(String obj, string path, object value)
    {
        switch (path)
        {

        }
    }
    private static object GetPropertyForSingle(Single obj, string path)
    {
        switch (path)
        {
            default:
                return null;
        }
    }
    private static void SetPropertyForSingle(Single obj, string path, object value)
    {
        switch (path)
        {

        }
    }
    private static object GetPropertyForBoolean(Boolean obj, string path)
    {
        switch (path)
        {
            default:
                return null;
        }
    }
    private static void SetPropertyForBoolean(Boolean obj, string path, object value)
    {
        switch (path)
        {

        }
    }
    private static object GetPropertyForQuaternion(Quaternion obj, string path)
    {
        switch (path)
        {
            case "/eulerAngles/magnitude":
                return obj.eulerAngles.magnitude;
            case "/eulerAngles/sqrMagnitude":
                return obj.eulerAngles.sqrMagnitude;
            case "/eulerAngles/x":
                return obj.eulerAngles.x;
            case "/eulerAngles/y":
                return obj.eulerAngles.y;
            case "/eulerAngles/z":
                return obj.eulerAngles.z;
            case "/x":
                return obj.x;
            case "/y":
                return obj.y;
            case "/z":
                return obj.z;
            case "/w":
                return obj.w;
            case "/eulerAngles":
                return obj.eulerAngles;
            default:
                return null;
        }
    }
    private static void SetPropertyForQuaternion(Quaternion obj, string path, object value)
    {
        switch (path)
        {
            case "/x":
                obj.x = (Single)value;
                break;
            case "/y":
                obj.y = (Single)value;
                break;
            case "/z":
                obj.z = (Single)value;
                break;
            case "/w":
                obj.w = (Single)value;
                break;
        }
    }
    private static object GetPropertyForVector2(Vector2 obj, string path)
    {
        switch (path)
        {
            case "/magnitude":
                return obj.magnitude;
            case "/sqrMagnitude":
                return obj.sqrMagnitude;
            case "/x":
                return obj.x;
            case "/y":
                return obj.y;
            default:
                return null;
        }
    }
    private static void SetPropertyForVector2(Vector2 obj, string path, object value)
    {
        switch (path)
        {
            case "/x":
                obj.x = (Single)value;
                break;
            case "/y":
                obj.y = (Single)value;
                break;
        }
    }
    private static object GetPropertyForVector3(Vector3 obj, string path)
    {
        switch (path)
        {
            case "/magnitude":
                return obj.magnitude;
            case "/sqrMagnitude":
                return obj.sqrMagnitude;
            case "/x":
                return obj.x;
            case "/y":
                return obj.y;
            case "/z":
                return obj.z;
            default:
                return null;
        }
    }
    private static void SetPropertyForVector3(Vector3 obj, string path, object value)
    {
        switch (path)
        {
            case "/x":
                obj.x = (Single)value;
                break;
            case "/y":
                obj.y = (Single)value;
                break;
            case "/z":
                obj.z = (Single)value;
                break;
        }
    }
    private static object GetPropertyForVector4(Vector4 obj, string path)
    {
        switch (path)
        {
            case "/magnitude":
                return obj.magnitude;
            case "/sqrMagnitude":
                return obj.sqrMagnitude;
            case "/x":
                return obj.x;
            case "/y":
                return obj.y;
            case "/z":
                return obj.z;
            case "/w":
                return obj.w;
            default:
                return null;
        }
    }
    private static void SetPropertyForVector4(Vector4 obj, string path, object value)
    {
        switch (path)
        {
            case "/x":
                obj.x = (Single)value;
                break;
            case "/y":
                obj.y = (Single)value;
                break;
            case "/z":
                obj.z = (Single)value;
                break;
            case "/w":
                obj.w = (Single)value;
                break;
        }
    }
    private static object GetPropertyForMatrix4x4(Matrix4x4 obj, string path)
    {
        switch (path)
        {
            case "/rotation/eulerAngles/magnitude":
                return obj.rotation.eulerAngles.magnitude;
            case "/rotation/eulerAngles/sqrMagnitude":
                return obj.rotation.eulerAngles.sqrMagnitude;
            case "/rotation/eulerAngles/x":
                return obj.rotation.eulerAngles.x;
            case "/rotation/eulerAngles/y":
                return obj.rotation.eulerAngles.y;
            case "/rotation/eulerAngles/z":
                return obj.rotation.eulerAngles.z;
            case "/rotation/x":
                return obj.rotation.x;
            case "/rotation/y":
                return obj.rotation.y;
            case "/rotation/z":
                return obj.rotation.z;
            case "/rotation/w":
                return obj.rotation.w;
            case "/lossyScale/magnitude":
                return obj.lossyScale.magnitude;
            case "/lossyScale/sqrMagnitude":
                return obj.lossyScale.sqrMagnitude;
            case "/lossyScale/x":
                return obj.lossyScale.x;
            case "/lossyScale/y":
                return obj.lossyScale.y;
            case "/lossyScale/z":
                return obj.lossyScale.z;
            case "/determinant":
                return obj.determinant;
            case "/decomposeProjection/left":
                return obj.decomposeProjection.left;
            case "/decomposeProjection/right":
                return obj.decomposeProjection.right;
            case "/decomposeProjection/bottom":
                return obj.decomposeProjection.bottom;
            case "/decomposeProjection/top":
                return obj.decomposeProjection.top;
            case "/decomposeProjection/zNear":
                return obj.decomposeProjection.zNear;
            case "/decomposeProjection/zFar":
                return obj.decomposeProjection.zFar;
            case "/m00":
                return obj.m00;
            case "/m10":
                return obj.m10;
            case "/m20":
                return obj.m20;
            case "/m30":
                return obj.m30;
            case "/m01":
                return obj.m01;
            case "/m11":
                return obj.m11;
            case "/m21":
                return obj.m21;
            case "/m31":
                return obj.m31;
            case "/m02":
                return obj.m02;
            case "/m12":
                return obj.m12;
            case "/m22":
                return obj.m22;
            case "/m32":
                return obj.m32;
            case "/m03":
                return obj.m03;
            case "/m13":
                return obj.m13;
            case "/m23":
                return obj.m23;
            case "/m33":
                return obj.m33;
            case "/isIdentity":
                return obj.isIdentity;
            case "/rotation":
                return obj.rotation;
            case "/rotation/eulerAngles":
                return obj.rotation.eulerAngles;
            case "/lossyScale":
                return obj.lossyScale;
            default:
                return null;
        }
    }
    private static void SetPropertyForMatrix4x4(Matrix4x4 obj, string path, object value)
    {
        switch (path)
        {
            case "/m00":
                obj.m00 = (Single)value;
                break;
            case "/m10":
                obj.m10 = (Single)value;
                break;
            case "/m20":
                obj.m20 = (Single)value;
                break;
            case "/m30":
                obj.m30 = (Single)value;
                break;
            case "/m01":
                obj.m01 = (Single)value;
                break;
            case "/m11":
                obj.m11 = (Single)value;
                break;
            case "/m21":
                obj.m21 = (Single)value;
                break;
            case "/m31":
                obj.m31 = (Single)value;
                break;
            case "/m02":
                obj.m02 = (Single)value;
                break;
            case "/m12":
                obj.m12 = (Single)value;
                break;
            case "/m22":
                obj.m22 = (Single)value;
                break;
            case "/m32":
                obj.m32 = (Single)value;
                break;
            case "/m03":
                obj.m03 = (Single)value;
                break;
            case "/m13":
                obj.m13 = (Single)value;
                break;
            case "/m23":
                obj.m23 = (Single)value;
                break;
            case "/m33":
                obj.m33 = (Single)value;
                break;
        }
    }
    private static object GetPropertyForGameObject(GameObject obj, string path)
    {
        switch (path)
        {
            case "/transform/childCount":
                return obj.transform.childCount;
            case "/transform/hierarchyCapacity":
                return obj.transform.hierarchyCapacity;
            case "/transform/hierarchyCount":
                return obj.transform.hierarchyCount;
            case "/layer":
                return obj.layer;
            case "/scene/handle":
                return obj.scene.handle;
            case "/scene/buildIndex":
                return obj.scene.buildIndex;
            case "/scene/rootCount":
                return obj.scene.rootCount;
            case "/transform/tag":
                return obj.transform.tag;
            case "/transform/name":
                return obj.transform.name;
            case "/tag":
                return obj.tag;
            case "/scene/path":
                return obj.scene.path;
            case "/scene/name":
                return obj.scene.name;
            case "/name":
                return obj.name;
            case "/transform/position/magnitude":
                return obj.transform.position.magnitude;
            case "/transform/position/sqrMagnitude":
                return obj.transform.position.sqrMagnitude;
            case "/transform/position/x":
                return obj.transform.position.x;
            case "/transform/position/y":
                return obj.transform.position.y;
            case "/transform/position/z":
                return obj.transform.position.z;
            case "/transform/localPosition/magnitude":
                return obj.transform.localPosition.magnitude;
            case "/transform/localPosition/sqrMagnitude":
                return obj.transform.localPosition.sqrMagnitude;
            case "/transform/localPosition/x":
                return obj.transform.localPosition.x;
            case "/transform/localPosition/y":
                return obj.transform.localPosition.y;
            case "/transform/localPosition/z":
                return obj.transform.localPosition.z;
            case "/transform/eulerAngles/magnitude":
                return obj.transform.eulerAngles.magnitude;
            case "/transform/eulerAngles/sqrMagnitude":
                return obj.transform.eulerAngles.sqrMagnitude;
            case "/transform/eulerAngles/x":
                return obj.transform.eulerAngles.x;
            case "/transform/eulerAngles/y":
                return obj.transform.eulerAngles.y;
            case "/transform/eulerAngles/z":
                return obj.transform.eulerAngles.z;
            case "/transform/localEulerAngles/magnitude":
                return obj.transform.localEulerAngles.magnitude;
            case "/transform/localEulerAngles/sqrMagnitude":
                return obj.transform.localEulerAngles.sqrMagnitude;
            case "/transform/localEulerAngles/x":
                return obj.transform.localEulerAngles.x;
            case "/transform/localEulerAngles/y":
                return obj.transform.localEulerAngles.y;
            case "/transform/localEulerAngles/z":
                return obj.transform.localEulerAngles.z;
            case "/transform/right/magnitude":
                return obj.transform.right.magnitude;
            case "/transform/right/sqrMagnitude":
                return obj.transform.right.sqrMagnitude;
            case "/transform/right/x":
                return obj.transform.right.x;
            case "/transform/right/y":
                return obj.transform.right.y;
            case "/transform/right/z":
                return obj.transform.right.z;
            case "/transform/up/magnitude":
                return obj.transform.up.magnitude;
            case "/transform/up/sqrMagnitude":
                return obj.transform.up.sqrMagnitude;
            case "/transform/up/x":
                return obj.transform.up.x;
            case "/transform/up/y":
                return obj.transform.up.y;
            case "/transform/up/z":
                return obj.transform.up.z;
            case "/transform/forward/magnitude":
                return obj.transform.forward.magnitude;
            case "/transform/forward/sqrMagnitude":
                return obj.transform.forward.sqrMagnitude;
            case "/transform/forward/x":
                return obj.transform.forward.x;
            case "/transform/forward/y":
                return obj.transform.forward.y;
            case "/transform/forward/z":
                return obj.transform.forward.z;
            case "/transform/rotation/eulerAngles/magnitude":
                return obj.transform.rotation.eulerAngles.magnitude;
            case "/transform/rotation/eulerAngles/sqrMagnitude":
                return obj.transform.rotation.eulerAngles.sqrMagnitude;
            case "/transform/rotation/eulerAngles/x":
                return obj.transform.rotation.eulerAngles.x;
            case "/transform/rotation/eulerAngles/y":
                return obj.transform.rotation.eulerAngles.y;
            case "/transform/rotation/eulerAngles/z":
                return obj.transform.rotation.eulerAngles.z;
            case "/transform/rotation/x":
                return obj.transform.rotation.x;
            case "/transform/rotation/y":
                return obj.transform.rotation.y;
            case "/transform/rotation/z":
                return obj.transform.rotation.z;
            case "/transform/rotation/w":
                return obj.transform.rotation.w;
            case "/transform/localRotation/eulerAngles/magnitude":
                return obj.transform.localRotation.eulerAngles.magnitude;
            case "/transform/localRotation/eulerAngles/sqrMagnitude":
                return obj.transform.localRotation.eulerAngles.sqrMagnitude;
            case "/transform/localRotation/eulerAngles/x":
                return obj.transform.localRotation.eulerAngles.x;
            case "/transform/localRotation/eulerAngles/y":
                return obj.transform.localRotation.eulerAngles.y;
            case "/transform/localRotation/eulerAngles/z":
                return obj.transform.localRotation.eulerAngles.z;
            case "/transform/localRotation/x":
                return obj.transform.localRotation.x;
            case "/transform/localRotation/y":
                return obj.transform.localRotation.y;
            case "/transform/localRotation/z":
                return obj.transform.localRotation.z;
            case "/transform/localRotation/w":
                return obj.transform.localRotation.w;
            case "/transform/localScale/magnitude":
                return obj.transform.localScale.magnitude;
            case "/transform/localScale/sqrMagnitude":
                return obj.transform.localScale.sqrMagnitude;
            case "/transform/localScale/x":
                return obj.transform.localScale.x;
            case "/transform/localScale/y":
                return obj.transform.localScale.y;
            case "/transform/localScale/z":
                return obj.transform.localScale.z;
            case "/transform/worldToLocalMatrix/rotation/eulerAngles/magnitude":
                return obj.transform.worldToLocalMatrix.rotation.eulerAngles.magnitude;
            case "/transform/worldToLocalMatrix/rotation/eulerAngles/sqrMagnitude":
                return obj.transform.worldToLocalMatrix.rotation.eulerAngles.sqrMagnitude;
            case "/transform/worldToLocalMatrix/rotation/eulerAngles/x":
                return obj.transform.worldToLocalMatrix.rotation.eulerAngles.x;
            case "/transform/worldToLocalMatrix/rotation/eulerAngles/y":
                return obj.transform.worldToLocalMatrix.rotation.eulerAngles.y;
            case "/transform/worldToLocalMatrix/rotation/eulerAngles/z":
                return obj.transform.worldToLocalMatrix.rotation.eulerAngles.z;
            case "/transform/worldToLocalMatrix/rotation/x":
                return obj.transform.worldToLocalMatrix.rotation.x;
            case "/transform/worldToLocalMatrix/rotation/y":
                return obj.transform.worldToLocalMatrix.rotation.y;
            case "/transform/worldToLocalMatrix/rotation/z":
                return obj.transform.worldToLocalMatrix.rotation.z;
            case "/transform/worldToLocalMatrix/rotation/w":
                return obj.transform.worldToLocalMatrix.rotation.w;
            case "/transform/worldToLocalMatrix/lossyScale/magnitude":
                return obj.transform.worldToLocalMatrix.lossyScale.magnitude;
            case "/transform/worldToLocalMatrix/lossyScale/sqrMagnitude":
                return obj.transform.worldToLocalMatrix.lossyScale.sqrMagnitude;
            case "/transform/worldToLocalMatrix/lossyScale/x":
                return obj.transform.worldToLocalMatrix.lossyScale.x;
            case "/transform/worldToLocalMatrix/lossyScale/y":
                return obj.transform.worldToLocalMatrix.lossyScale.y;
            case "/transform/worldToLocalMatrix/lossyScale/z":
                return obj.transform.worldToLocalMatrix.lossyScale.z;
            case "/transform/worldToLocalMatrix/determinant":
                return obj.transform.worldToLocalMatrix.determinant;
            case "/transform/worldToLocalMatrix/decomposeProjection/left":
                return obj.transform.worldToLocalMatrix.decomposeProjection.left;
            case "/transform/worldToLocalMatrix/decomposeProjection/right":
                return obj.transform.worldToLocalMatrix.decomposeProjection.right;
            case "/transform/worldToLocalMatrix/decomposeProjection/bottom":
                return obj.transform.worldToLocalMatrix.decomposeProjection.bottom;
            case "/transform/worldToLocalMatrix/decomposeProjection/top":
                return obj.transform.worldToLocalMatrix.decomposeProjection.top;
            case "/transform/worldToLocalMatrix/decomposeProjection/zNear":
                return obj.transform.worldToLocalMatrix.decomposeProjection.zNear;
            case "/transform/worldToLocalMatrix/decomposeProjection/zFar":
                return obj.transform.worldToLocalMatrix.decomposeProjection.zFar;
            case "/transform/worldToLocalMatrix/m00":
                return obj.transform.worldToLocalMatrix.m00;
            case "/transform/worldToLocalMatrix/m10":
                return obj.transform.worldToLocalMatrix.m10;
            case "/transform/worldToLocalMatrix/m20":
                return obj.transform.worldToLocalMatrix.m20;
            case "/transform/worldToLocalMatrix/m30":
                return obj.transform.worldToLocalMatrix.m30;
            case "/transform/worldToLocalMatrix/m01":
                return obj.transform.worldToLocalMatrix.m01;
            case "/transform/worldToLocalMatrix/m11":
                return obj.transform.worldToLocalMatrix.m11;
            case "/transform/worldToLocalMatrix/m21":
                return obj.transform.worldToLocalMatrix.m21;
            case "/transform/worldToLocalMatrix/m31":
                return obj.transform.worldToLocalMatrix.m31;
            case "/transform/worldToLocalMatrix/m02":
                return obj.transform.worldToLocalMatrix.m02;
            case "/transform/worldToLocalMatrix/m12":
                return obj.transform.worldToLocalMatrix.m12;
            case "/transform/worldToLocalMatrix/m22":
                return obj.transform.worldToLocalMatrix.m22;
            case "/transform/worldToLocalMatrix/m32":
                return obj.transform.worldToLocalMatrix.m32;
            case "/transform/worldToLocalMatrix/m03":
                return obj.transform.worldToLocalMatrix.m03;
            case "/transform/worldToLocalMatrix/m13":
                return obj.transform.worldToLocalMatrix.m13;
            case "/transform/worldToLocalMatrix/m23":
                return obj.transform.worldToLocalMatrix.m23;
            case "/transform/worldToLocalMatrix/m33":
                return obj.transform.worldToLocalMatrix.m33;
            case "/transform/localToWorldMatrix/rotation/eulerAngles/magnitude":
                return obj.transform.localToWorldMatrix.rotation.eulerAngles.magnitude;
            case "/transform/localToWorldMatrix/rotation/eulerAngles/sqrMagnitude":
                return obj.transform.localToWorldMatrix.rotation.eulerAngles.sqrMagnitude;
            case "/transform/localToWorldMatrix/rotation/eulerAngles/x":
                return obj.transform.localToWorldMatrix.rotation.eulerAngles.x;
            case "/transform/localToWorldMatrix/rotation/eulerAngles/y":
                return obj.transform.localToWorldMatrix.rotation.eulerAngles.y;
            case "/transform/localToWorldMatrix/rotation/eulerAngles/z":
                return obj.transform.localToWorldMatrix.rotation.eulerAngles.z;
            case "/transform/localToWorldMatrix/rotation/x":
                return obj.transform.localToWorldMatrix.rotation.x;
            case "/transform/localToWorldMatrix/rotation/y":
                return obj.transform.localToWorldMatrix.rotation.y;
            case "/transform/localToWorldMatrix/rotation/z":
                return obj.transform.localToWorldMatrix.rotation.z;
            case "/transform/localToWorldMatrix/rotation/w":
                return obj.transform.localToWorldMatrix.rotation.w;
            case "/transform/localToWorldMatrix/lossyScale/magnitude":
                return obj.transform.localToWorldMatrix.lossyScale.magnitude;
            case "/transform/localToWorldMatrix/lossyScale/sqrMagnitude":
                return obj.transform.localToWorldMatrix.lossyScale.sqrMagnitude;
            case "/transform/localToWorldMatrix/lossyScale/x":
                return obj.transform.localToWorldMatrix.lossyScale.x;
            case "/transform/localToWorldMatrix/lossyScale/y":
                return obj.transform.localToWorldMatrix.lossyScale.y;
            case "/transform/localToWorldMatrix/lossyScale/z":
                return obj.transform.localToWorldMatrix.lossyScale.z;
            case "/transform/localToWorldMatrix/determinant":
                return obj.transform.localToWorldMatrix.determinant;
            case "/transform/localToWorldMatrix/decomposeProjection/left":
                return obj.transform.localToWorldMatrix.decomposeProjection.left;
            case "/transform/localToWorldMatrix/decomposeProjection/right":
                return obj.transform.localToWorldMatrix.decomposeProjection.right;
            case "/transform/localToWorldMatrix/decomposeProjection/bottom":
                return obj.transform.localToWorldMatrix.decomposeProjection.bottom;
            case "/transform/localToWorldMatrix/decomposeProjection/top":
                return obj.transform.localToWorldMatrix.decomposeProjection.top;
            case "/transform/localToWorldMatrix/decomposeProjection/zNear":
                return obj.transform.localToWorldMatrix.decomposeProjection.zNear;
            case "/transform/localToWorldMatrix/decomposeProjection/zFar":
                return obj.transform.localToWorldMatrix.decomposeProjection.zFar;
            case "/transform/localToWorldMatrix/m00":
                return obj.transform.localToWorldMatrix.m00;
            case "/transform/localToWorldMatrix/m10":
                return obj.transform.localToWorldMatrix.m10;
            case "/transform/localToWorldMatrix/m20":
                return obj.transform.localToWorldMatrix.m20;
            case "/transform/localToWorldMatrix/m30":
                return obj.transform.localToWorldMatrix.m30;
            case "/transform/localToWorldMatrix/m01":
                return obj.transform.localToWorldMatrix.m01;
            case "/transform/localToWorldMatrix/m11":
                return obj.transform.localToWorldMatrix.m11;
            case "/transform/localToWorldMatrix/m21":
                return obj.transform.localToWorldMatrix.m21;
            case "/transform/localToWorldMatrix/m31":
                return obj.transform.localToWorldMatrix.m31;
            case "/transform/localToWorldMatrix/m02":
                return obj.transform.localToWorldMatrix.m02;
            case "/transform/localToWorldMatrix/m12":
                return obj.transform.localToWorldMatrix.m12;
            case "/transform/localToWorldMatrix/m22":
                return obj.transform.localToWorldMatrix.m22;
            case "/transform/localToWorldMatrix/m32":
                return obj.transform.localToWorldMatrix.m32;
            case "/transform/localToWorldMatrix/m03":
                return obj.transform.localToWorldMatrix.m03;
            case "/transform/localToWorldMatrix/m13":
                return obj.transform.localToWorldMatrix.m13;
            case "/transform/localToWorldMatrix/m23":
                return obj.transform.localToWorldMatrix.m23;
            case "/transform/localToWorldMatrix/m33":
                return obj.transform.localToWorldMatrix.m33;
            case "/transform/lossyScale/magnitude":
                return obj.transform.lossyScale.magnitude;
            case "/transform/lossyScale/sqrMagnitude":
                return obj.transform.lossyScale.sqrMagnitude;
            case "/transform/lossyScale/x":
                return obj.transform.lossyScale.x;
            case "/transform/lossyScale/y":
                return obj.transform.lossyScale.y;
            case "/transform/lossyScale/z":
                return obj.transform.lossyScale.z;
            case "/transform/worldToLocalMatrix/isIdentity":
                return obj.transform.worldToLocalMatrix.isIdentity;
            case "/transform/localToWorldMatrix/isIdentity":
                return obj.transform.localToWorldMatrix.isIdentity;
            case "/transform/hasChanged":
                return obj.transform.hasChanged;
            case "/activeSelf":
                return obj.activeSelf;
            case "/activeInHierarchy":
                return obj.activeInHierarchy;
            case "/isStatic":
                return obj.isStatic;
            case "/scene/isLoaded":
                return obj.scene.isLoaded;
            case "/scene/isDirty":
                return obj.scene.isDirty;
            case "/scene/isSubScene":
                return obj.scene.isSubScene;
            case "/transform/rotation":
                return obj.transform.rotation;
            case "/transform/localRotation":
                return obj.transform.localRotation;
            case "/transform/worldToLocalMatrix/rotation":
                return obj.transform.worldToLocalMatrix.rotation;
            case "/transform/localToWorldMatrix/rotation":
                return obj.transform.localToWorldMatrix.rotation;
            case "/transform/position":
                return obj.transform.position;
            case "/transform/localPosition":
                return obj.transform.localPosition;
            case "/transform/eulerAngles":
                return obj.transform.eulerAngles;
            case "/transform/localEulerAngles":
                return obj.transform.localEulerAngles;
            case "/transform/right":
                return obj.transform.right;
            case "/transform/up":
                return obj.transform.up;
            case "/transform/forward":
                return obj.transform.forward;
            case "/transform/rotation/eulerAngles":
                return obj.transform.rotation.eulerAngles;
            case "/transform/localRotation/eulerAngles":
                return obj.transform.localRotation.eulerAngles;
            case "/transform/localScale":
                return obj.transform.localScale;
            case "/transform/worldToLocalMatrix/rotation/eulerAngles":
                return obj.transform.worldToLocalMatrix.rotation.eulerAngles;
            case "/transform/worldToLocalMatrix/lossyScale":
                return obj.transform.worldToLocalMatrix.lossyScale;
            case "/transform/localToWorldMatrix/rotation/eulerAngles":
                return obj.transform.localToWorldMatrix.rotation.eulerAngles;
            case "/transform/localToWorldMatrix/lossyScale":
                return obj.transform.localToWorldMatrix.lossyScale;
            case "/transform/lossyScale":
                return obj.transform.lossyScale;
            case "/transform/worldToLocalMatrix":
                return obj.transform.worldToLocalMatrix;
            case "/transform/localToWorldMatrix":
                return obj.transform.localToWorldMatrix;
            default:
                return null;
        }
    }
    private static void SetPropertyForGameObject(GameObject obj, string path, object value)
    {
        switch (path)
        {
            case "/layer":
                obj.layer = (Int32)value;
                break;
            case "/tag":
                obj.tag = (String)value;
                break;
            case "/name":
                obj.name = (String)value;
                break;
            case "/isStatic":
                obj.isStatic = (Boolean)value;
                break;
        }
    }
    private static object GetPropertyForAnimationCurve(AnimationCurve obj, string path)
    {
        switch (path)
        {
            case "/keys/Length":
                return obj.keys.Length;
            case "/keys/Rank":
                return obj.keys.Rank;
            case "/length":
                return obj.length;
            case "/keys/IsFixedSize":
                return obj.keys.IsFixedSize;
            case "/keys/IsReadOnly":
                return obj.keys.IsReadOnly;
            case "/keys/IsSynchronized":
                return obj.keys.IsSynchronized;
            default:
                return null;
        }
    }
    private static void SetPropertyForAnimationCurve(AnimationCurve obj, string path, object value)
    {
        switch (path)
        {

        }
    }

}